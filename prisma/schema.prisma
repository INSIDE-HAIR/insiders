// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  EMPLOYEE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  lastName              String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  contactNumber         String?
  terms                 Boolean                @default(true)
  role                  UserRole               @default(CLIENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  holdedId              String?
  holdedData            HoldedData[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLogin             DateTime?
  // Otros campos y configuraciones...
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//TODO: REVISAR
model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// seperate for security reason
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

//TODO: REVISAR
model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// HOLDED DATA
model HoldedData {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  customId        String?
  name            String
  code            String
  vatnumber       String
  tradeName       String
  email           String
  mobile          String
  phone           String
  type            String
  iban            String
  swift           String
  groupId         String
  clientRecord    String
  supplierRecord  String
  billAddress     BillAddress?
  customFields    CustomField[]
  defaults        Json?
  socialNetworks  Json?
  tags            String[]
  notes           String[]
  contactPersons  ContactPerson[]
  shippingAddress String[]
  isPerson        Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  updatedHash     String?
  userId          String          @unique @db.ObjectId
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ContactPerson {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  personId      String
  name          String
  job           String?
  phone         String?
  email         String?
  sendDocuments Boolean     @default(false)
  HoldedData    HoldedData? @relation(fields: [holdedDataId], references: [id])
  holdedDataId  String?     @db.ObjectId
}

model BillAddress {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  address      String
  city         String
  postalCode   Int
  province     String
  country      String
  countryCode  String
  info         String?
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model CustomField {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  field        CustomFieldType
  holdedDataId String          @db.ObjectId
  holdedData   HoldedData      @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
  value        String
}

enum CustomFieldType {
  EtapaDelSalon
  NumeroColaboradores
  NumeroSalones
  FacturacionPromediaMensual
  EtapaDelManager
  ServiciosRecurrentesDeRenovacionAnual
  EstadoDelCliente
  FechaDeAltaCliente
  FechaDeBajaCliente
  ResponsableDeSesionDeBienvenida
  FechaDeAltaMKTSALON
  FechaDeBajaMKTSALON
  NivelMKTSALON
  TEAMS
  STARTMKT
  HIPERVENTAS
  MasterIBM
  MasterSTARCLUB
  MasterSALONEXPERIENCE
  TallerScallingS
  FechaDeAltaClubINSIDE
  FechaDeBajaClubINSIDE
  NivelClubINSIDE
  FechaDeAltaGestionDirectiva
  FechaDeBajaGestionDirectiva
  NivelGestionDirectiva
  MENUSERVICIOS
  CM
  Mentoring
  ResponsableDeConsultoria
  SOCIALMKT
  ADSMKT
  MKTDIRECTOWEBMKT
  FUNNELMKT
  ResponsableAGENCIA
  BRANDING
  Consultoria360
  insidersID
}
