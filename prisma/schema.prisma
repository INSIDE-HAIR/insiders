// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
  EMPLOYEE
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  lastName              String?
  email                 String                 @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  contactNumber         String?
  terms                 Boolean                @default(true)
  role                  UserRole               @default(CLIENT)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  holdedId              String?
  createdHoldedSyncAt   DateTime?
  lastHoldedSyncAt      DateTime?
  docs                  Document[]
  holdedData            HoldedData?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  lastLogin             DateTime?              @default(now())
  // Offers             Offer[]
  // Services           Servicep[]              
}

// INICIO DE AUTH
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//TODO: REVISAR
model TwoFactorConfirmation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// seperate for security reason
model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

//TODO: REVISAR 2FA
model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

/// FIN DE AUTH

// INICIO DE otros items relacionados a USER
model Document {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  customId  String?
  provider  DocsProvider? @default(GOOGLE_DRIVE)
  category  docsCategory?
  name      String
  url       String
  notes     String?
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// FIN DE otros items relacionados a USER

// INICIO DE HOLDED DATA
model HoldedData {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  holdedId          String
  customId          String?
  name              String
  code              String?
  vatnumber         String?
  tradeName         String?
  email             String?
  mobile            String?
  phone             String?
  type              String?
  iban              String?
  swift             String?
  groupId           String?
  clientRecord      ClientRecord?
  supplierRecord    SupplierRecord?
  billAddress       BillAddress?
  customFields      CustomField[]
  defaults          Defaults?
  socialNetworks    SocialNetworks?
  tags              String[]
  notes             Note[]
  contactPersons    ContactPerson[]
  shippingAddresses String[]
  isPerson          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  updatedHash       String?
  userId            String          @unique @db.ObjectId
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  num          Int
  name         String
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model SupplierRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  num          Int
  name         String
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model BillAddress {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  address      String
  city         String
  postalCode   Int
  province     String
  country      String
  countryCode  String
  info         String?
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model CustomField {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  field        CustomFieldType
  holdedDataId String          @db.ObjectId
  holdedData   HoldedData      @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
  value        String?

  @@unique([field, holdedDataId])
}

model Defaults {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  salesChannel        Int
  expensesAccount     Int
  dueDays             Int
  paymentDay          Int
  paymentMethod       Int
  discount            Int
  language            String
  currency            String
  salesTax            String[]
  purchasesTax        String[]
  accumulateInForm347 String
  holdedDataId        String     @unique @db.ObjectId
  holdedData          HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model SocialNetworks {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  facebook     String?
  twitter      String?
  instagram    String?
  google       String?
  linkedin     String?
  pinterest    String?
  foursquare   String?
  youtube      String?
  vimeo        String?
  wordpress    String?
  website      String?
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model Note {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  noteId       String     @db.ObjectId
  name         String
  description  String
  color        String
  updatedAt    Int
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model ContactPerson {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  personId      String
  name          String
  job           String?
  phone         String?
  email         String?
  sendDocuments Int        @default(0)
  holdedDataId  String     @unique @db.ObjectId
  holdedData    HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

// FIN DE HOLDED DATA

// INICIO DE MARKETING INTERNO
// TODO: revisar MARKETING INTERNO 

// model Offer {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String
//   description String
//   price       Float
//   services    String[]
//   users       User[]
//   startDate   DateTime
//   endDate     DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

// FIN DE MARKETING

// INICIO DE SERVICIOS
// TODO: revisar SERVICIOS y juntar con fechas de inicio y fin
// FIN DE SERVICIOS

enum docsCategory {
  FINANCIAL // Financiero
  COMMERCIAL // Comercial
  LOGISTICS // Logística
  HR // Recursos Humanos
  OTHER // Otros
}

enum categoryFinancial {
  INVOICES // Facturas por cobrar
  RECEIPTS // Recibos
  BILLS // Cuentas por pagar
  CREDITNOTES // Notas de crédito
  DEBITNOTES // Notas de débito
  EXPENSES // Gastos
  PURCHASEORDERS // Pedidos de compra
  SALESORDERS // Pedidos de venta
  SUPPLIERINVOICES // Facturas de proveedor
  TAXES // Impuestos
}

enum categoryCommercial {
  CERTIFICATES // Certificados
  CONTRACTS // Contratos
  AGREEMENTS // Acuerdos
  ESTIMATES // Presupuestos
  PROPOSALS // Propuestas
  QUOTES // Cotizaciones
  PURCHASE // Compras
  SALES // Ventas
}

enum categoryLogistics {
  SHIPMENTS // Envíos
  DELIVERYNOTES // Albaranes
  DISPATCHNOTES // Notas de envío
  PACKINGSLIPS // Albaranes de embalaje
}

enum categoryHR {
  PAYROLLS // Nóminas
  TIMESHEETS // Partes de horas
  WORKSCHEDULES // Horarios de trabajo
}

enum categoryOther {
  TICKETS // Tickets
  VOUCHERS // Vales
  WARRANTEES // Garantías
  WORKSHEETS // Hojas de trabajo
  WORKORDERS // Órdenes de trabajo
  OTHER // Otros
}

enum DocsProvider {
  GOOGLE_DRIVE
  HOLDED
  LOCAL
}

enum CustomFieldType {
  VENTASMesDeCreacionDelContacto
  VENTASAnoDeCreacionDelContacto
  VENTASOrigenDelLead
  VENTASResponsablePrimerContacto
  VENTASResponsableDeSesionEstrategicaInicial
  VENTASPlanDeCrecimiento360
  VENTASResponsableDeSesionDeBienvenida
  CLIENTESEstadoDelCliente
  CLIENTESEtapaDelManager
  CLIENTESEtapaDelSalon
  CLIENTESNumeroDeColaboradores
  CLIENTESNumeroDeSalones
  CLIENTESFacturacionPromediaMensual
  CLIENTESFechaDeAlta
  CLIENTESFechaDeBaja
  CLIENTESInsidersID
  MARKETINGSALONFechaDeInicio
  MARKETINGSALONFechaDeFin
  MARKETINGSALONNivel
  STARTMARKETINGEdicion
  TEAMSFechaDeAlta
  TEAMSFechaDeBaja
  SALONHIPERVENTASEdicion
  IBMedicion
  STARCLUBEdicion
  SALONEXPERIENCEEdicion
  SCALINGSEdicion
  CONSULTORIA360Edicion
  MENUSERVICIOSEdicion
  INSIDECLUBFechaDeInicio
  INSIDECLUBFechaDeFin
  INSIDECLUBNivel
  GESTIONDIRECTIVAFechaDeInicio
  GESTIONDIRECTIVAFechaDeFin
  GESTIONDIRECTIVALevel
  SOCIALMKTFechaDeInicio
  SOCIALMKTFechaDeFin
  ADSMKTFechaDeInicio
  ADSMKTFechaDeFin
  MKTDIRECTOWEBMKTFechaDeInicio
  MKTDIRECTOWEBMKTFechaDeFin
  FUNNELMKTFechaDeInicio
  FUNNELMKTFechaDeFin
  FUNNELMKTResponsable
  AGENCIAResponsable
  CREACIONDEMARCAFechaDeInicio
  DISENODEMARCAFechaDeInicio
  DESARROLLODEMARCAFechaDeInicio
  CREACIONDELOGOTIPOFechaDeInicio
  DISENODEFACHADAFechaDeInicio
  DISENODEINTERIORISMOFechaDeInicio
  DISENOWEBFechaDeInicio
  CMResponsable
  CMEstadoDelServicio
  MENTORINGResponsable
  MENTORINGEstadoDelServicio
  PRODUCTOSACTIVOSFechaDeFin
  FORMACIONINPEdicion
}
