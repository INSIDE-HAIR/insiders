model HoldedData {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  holdedId          String
  customId          String?
  name              String
  code              String?
  vatnumber         String?
  tradeName         String?
  email             String?
  mobile            String?
  phone             String?
  type              String?
  iban              String?
  swift             String?
  groupId           String?
  clientRecord      ClientRecord?
  supplierRecord    SupplierRecord?
  billAddress       BillAddress?
  customFields      CustomField[]
  defaults          Defaults?
  socialNetworks    SocialNetworks?
  tags              String[]
  notes             Note[]
  contactPersons    ContactPerson[]
  shippingAddresses String[]
  isPerson          Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  updatedHash       String?
  userId            String          @unique @db.ObjectId
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ClientRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  num          Int
  name         String
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model SupplierRecord {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  num          Int
  name         String
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model BillAddress {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  address      String
  city         String
  postalCode   Int
  province     String
  country      String
  countryCode  String
  info         String?
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model CustomField {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  field        String
  value        String?    @default("")
  holdedDataId String     @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?    @db.ObjectId

  @@index([holdedDataId, field, createdAt])
}

model Defaults {
  id                  String     @id @default(auto()) @map("_id") @db.ObjectId
  salesChannel        Int
  expensesAccount     Int
  dueDays             Int
  paymentDay          Int
  paymentMethod       Int
  discount            Int
  language            String
  currency            String
  salesTax            String[]
  purchasesTax        String[]
  accumulateInForm347 String
  holdedDataId        String     @unique @db.ObjectId
  holdedData          HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model SocialNetworks {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  facebook     String?
  twitter      String?
  instagram    String?
  google       String?
  linkedin     String?
  pinterest    String?
  foursquare   String?
  youtube      String?
  vimeo        String?
  wordpress    String?
  website      String?
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model Note {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  noteId       String     @db.ObjectId
  name         String
  description  String
  color        String
  updatedAt    Int
  holdedDataId String     @unique @db.ObjectId
  holdedData   HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
}

model ContactPerson {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  personId      String
  name          String
  job           String?
  phone         String?
  email         String?
  sendDocuments Int        @default(0)
  holdedDataId  String     @db.ObjectId
  holdedData    HoldedData @relation(fields: [holdedDataId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now())

  @@index([holdedDataId, createdAt])
}
